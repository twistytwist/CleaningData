install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
SWIRL()
swirl()
bye()
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
libary(dplyr)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(1:size))
select(cran, -(x:size))
select(cran, -(x:size))
select(cran, -(x:size))
select(cran, -(x:size))
skip()
filter(cran, package="swirl")
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran, size>100500, r_os=="linux_gnu")
filter(cran, size > 100500, r_os == "linux_gnu")
skip()
is.na(c:3,5,NA,10)
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version)
)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version package), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", quiz.csv, auto )
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "quiz.csv", auto )
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "quiz.csv", "auto" )
getwd()
read.csv("quiz.csv")
csv <- read.csv("quiz.csv")
head(csv)
colnames(csv)
csv$VAL
sum(csv$VAL == 24)
csv$VAL == 24
csv$VAL
csv$VAL == 2
sum(csv$VAL == 2)
csv[csv$val == 2]
csv[csv$val]
csv$val
csv$VAL == 2
sum(csv$VAL == 2)
test <- csv$VAL == 2
test
typeof(test)
test[1]
test <- csv$VAL
test
sum(!is.na(test))
sum(!is.na(csv$VAL == 2)
)
csv$VAL == 2
sum(csv$VAL == 2)
test <- csv$VAL == 2
test
test <- test[!is.na(test)]
test
sum(test)
csv$VAL
test <- csv[!is.na(csv$VAL)]
test <- csv$VAL[!is.na(csv$VAL)]
test
t4 <- test ]] "24"
t4 <- test == "24"
t4
sum(t4)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "quiz2.xlsx")
library(xlsx)
package(xlsx)
read.xlsx
library(xlsx)
install.packages(xlsx)
install.packages("xlsx")
library(xlsx)
library(rJava)
install.packages("rJava")
library(xlsx)
library(readxl)
install.packages("readxl")
library(readxl)
readxl::read_excel("quiz2.xlsx", colindex=1:3)
library(xlsx)
library(xlsx)
library(xlsx)
library(xlsx)
library(xlsx)
dat <- read.xlsx("quiz2.xlsx", 1, colIndex=7:15, rowIndex = 18:23)
dat <- read.xlsx("quiz2.xlsx", sheetIndex=1, colIndex=7:15, rowIndex = 18:23)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "quiz3.xlsx", mode='wb')
dat <- read.xlsx("quiz2.xlsx", sheetIndex=1, colIndex=7:15, rowIndex = 18:23)
dat <- read.xlsx("quiz3.xlsx", sheetIndex=1, colIndex=7:15, rowIndex = 18:23)
sum(dat$Zip*dat$Ext,na.rm=T)
library(xml)
install.packages("xml")
library(xml)
install.packages("XML")
library(XML)
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
doc <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal=TRUE)
doc <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml')
doc <- xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', isURL = TRUE)
doc <- xmlTreeParse
?xmlTreeParse
library(RCurl)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
xData <- getURL(fileURL)
xData <- getURL(fileUrl)
doc <- xmlParse(xData)
xmlName(doc)
doc
doc <- xmlTreeParse(fileUrl)
doc1 <- xmlTreeParse(xData)
doc1
xmlName(doc1)
rootNode <- xmlRoot(doc1)
xmlName(rootNode)
xmlSApply(rootNode, xmlValue)
source('~/rankall.R')
xpathSApply(rootNode, "//zipcode", xmlValue)
nextLevel <- rootNode[[1]]
nextLevel
head(nextLevel)
xpathSApply(nextLevel, "//zipcode", xmlValue)
xpathSApply(nextLevel, "//name", xmlValue)
doc1 <- xmlTreeParse(xData, useInternalNodes = TRUE)
rootNode <- xmlRoot(doc1)
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//zipcod", xmlValue)
xpathSApply(rootNode, "//zipcode", xmlValue)
zips <- xpathSApply(rootNode, "//zipcode", xmlValue)
zips[zips == "21231"]
count(zips[zips == "21231"])
nrow(zips[zips == "21231"])
sum(zips[zips == "21231"])
typeof(zips)
zips
21231 <- zips[zips == "21231"]
zipsIwant < zips[zips == "21231"]
zipsIwant <- zips[zips == "21231"]
zipsIwant
length(zipsIwant)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "pid.csv"")
f
quit
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "pid.csv")
read.csv("pid.csv")
?fread
library(data.table)
package("data.table")
install.packages("data.table")
library(data.table)
?fread
fread("pid.csv")
csv <- fread("pid.csv")
DT <- fread("pid.csv")
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
mean(DT$pwgtp15,by=DT$SEX)
sapply(split(DT$pwgtp15,DT$SEX),mean)
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15))
system.time(mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(for i in seq(1000) mean(DT[DT$SEX==1,]$pwgtp15))
system.time(for (i in seq(1000) mean(DT[DT$SEX==1,]$pwgtp15))
system.time((for i in 1:1000) mean(DT[DT$SEX==1,]$pwgtp15))
system.time(for (i in seq(1000) mean(DT[DT$SEX==1,]$pwgtp15)
system.time(for (i in seq(1000) {mean(DT[DT$SEX==1,]$pwgtp15}))
for (i in seq(1000) {mean(DT[DT$SEX==1,]$pwgtp15}
for (i in 1:1000) {mean(DT[DT$SEX==1,]$pwgtp15}
for (i in 1:1000) {mean(DT[DT$SEX==1,]$pwgtp15)}
system.time(for (i in 1:100) {mean(DT[DT$SEX==1,]$pwgtp15)})
system.time(for (i in 1:100) {mean(DT$pwgtp15,by=DT$SEX)})
system.time(for (i in 1:100) {sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time(for (i in 1:100) {DT[,mean(pwgtp15),by=SEX]})
system.time(for (i in 1:100) {tapply(DT$pwgtp15,DT$SEX,mean)})
system.time(for (i in 1:100) {rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
quiz <- read.csv("quiz.csv")
head(quiz)
quiz[value]
quiz[val]
quiz[quiz$val]
quiz$VAL
quiz[quiz$val == 24]
test <- !is.na(quiz[quiz$VAL])
test <- !is.na(quiz[quiz$VAL])
test <- !is.na(quiz[quiz$val])
test
quiz[quiz$val == 24]
test <- quiz[quiz$val == 24]
test
head(quiz)
test <- quiz$val
test
test <- quiz[,quiz$val]
test
test[1]
test <- quiz[quiz$val==24]
test
test[[1]]
test[1,]
quiz[quiz$val]
quiz[quiz$val == 21]
quiz[10]
quiz[val]
quiz[,quiz$val]
typeof(quiz)
test <- quiz[quiz$VAL == 24]
test <- csv$VAL[!is.na(csv$VAL)]
test
test <- csv$VAL[!is.na(csv$VAL)]
csv
test <- quiz$VAL[!is.na(quiz$VAL)]
test
test <- test == 24
test
sum(test)
dat <- read.xlsx("quiz2.xlsx", sheetIndex=1, colIndex=7:15, rowIndex = 18:23)
dat <- read.xlsx("quiz2.xlsx")
dat <- read.xlsx("quiz2.xlsx", sheetIndex=1)
dat <- read.xlsx("quiz3.xlsx", sheetIndex=1, colIndex=7:15, rowIndex = 18:23)
sum(dat$Zip*dat$Ext,na.rm=T)
length(zips[zips == "21231"])
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key="60142696c2b0c9bc74fe", secret="eb2474bd5b701d0409dd0528924c9cd6f0fdaa23")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
oauth_endpoints("github")
myapp <- oauth_app("github", key="60142696c2b0c9bc74fe", secret="eb2474bd5b701d0409dd0528924c9cd6f0fdaa23")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
library(httr)
library(httr)
oauth_endpoints("github")
?oauth_app
myapp <- oauth_app("AssignmentApp", key="479070d00af240bc4dd2", secret="846fec6f16a741e946afb7a1b24d0d5214516fde")
?oauth2.0_token
github_token <- oauth2.0_token(oauth_endpoints("AssignmentApp"), myapp)
oauth_endpoints("github")
oauth_endpoints("AssignmentApp")
myapp <- oauth_app("github", key="479070d00af240bc4dd2", secret="846fec6f16a741e946afb7a1b24d0d5214516fde")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
req[1]
req[2]
req[1]
req[1][1]
req[3]
req[4]
req
req["datasharing"]
stop_for_status(req)
content(req)
content(req)$datasharing
typeof(req)
colnames(req)
head(req)
content(req)
req[name=datasharing]
req[name="datasharing""]
req[req$name="datasharing""]
req[req$name=="datasharing""]
req[1]
req[30]
req[[30]]
content(req)
test <- content(req)
test[30]
test[test$name=="datasharing""]
test[test$name=="datasharing"]
test[20]
test[20,]
typeof(test)
length(test)
test["name"]
test[[20]]
test[test$name=="datasharing "]
test[test$name=="datasharing"]
test[test$name=="datasharing"][3]
item <- test[test$name=="datasharing"]
test
head(test)
item <- test[[test$name=="datasharing"]]
test[20]
item <- test[which(test$name=="datasharing")]
item
test[which(test$name=="datasharing")]
test[10]
test[[which(test$name=="datasharing")]
]
test[test$name]
content(test)
test[20]$name
test[[20]]$name
for(i in 1:30) { if(test[[i]]$name == "datasharing") print test[[i]]$created_at  }
for(i in 1:30) { if(test[[i]]$name == "datasharing") message() test[[i]]$created_at  }
for(i in 1:30) { if(test[[i]]$name == "datasharing") message(test[[i]]$created_at)  }
library(sqldf)
install.packages("sqldf")
library(sqldf)
library(swirl)
swirl()
mydf <- read.csv("path2csv", stringsAsFactors = FALS)
mydf <- read.csv(path2csv, stringsAsFactors = FALS)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(x:size))
skip()
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran, size>100500, r_os=="linux-gnu")
filter(cran, size>100500, r_os=="linux-gnu")
filter(cran, !is.na(r_version))
skip()
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- arrange(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran, size_mb=size/2^20)
mutate(cran3, size_mb=size/2^20)
mutate(cran3, size_mb=size/2^20, size_gb=size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran,package)
print(by_package)
summarize(by_package, mean(size))
?n
?n_distinct
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
swirl()
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
students3
res
submit()
extract_numeric("class5")
?mutate
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status="passed")
passed <- passed %>% mutate(status="passed")
failed <- failed %>% mutate(status="failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
submit()
sat %>% select(-contains("total")) %>% print()
sat %>% select(-contains("total")) %>% gather(key=part_sex, value=count, -score_range) %>% print()
sat %>% select(-contains("total")) %>% gather(key=part_sex, value=count, -score_range) %>% separate(c("part", "sex")) %>% print()
sat %>% select(-contains("total")) %>% gather(key=part_sex, value=count, -score_range) %>% separate(part_sex, c("part", "sex")) %>% print()
submit()
submit()
source('~/R/coursera/CleaningData/run_analysis.R')
x_test = read.table("UCI HAR Dataset/test/X_test.txt")
setwd("r/coursera/cleaningdata")
x_test = read.table("UCI HAR Dataset/test/X_test.txt")
x_train = read.table("UCI HAR Dataset/train/X_train.txt")
test ><- run_analysis(x_test, x_train)
test <- run_analysis(x_test, x_train)
source('~/R/coursera/CleaningData/run_analysis.R')
test <- run_analysis(x_test, x_train)
View(test)
source('~/R/coursera/CleaningData/run_analysis.R')
test <- run_analysis(x_test, x_train)
source('~/R/coursera/CleaningData/run_analysis.R')
test <- run_analysis(x_test, x_train)
?lapply
View(test)
test2 <- lapply(test, mean)
source('~/R/coursera/CleaningData/run_analysis.R')
test2 <- lapply(test, mean)
test <- run_analysis(x_test, x_train)
source('~/R/coursera/CleaningData/run_analysis.R')
test <- run_analysis(x_test, x_train)
source('~/R/coursera/CleaningData/run_analysis.R')
test <- run_analysis(x_test, x_train)
View(test)
source('~/R/coursera/CleaningData/run_analysis.R')
